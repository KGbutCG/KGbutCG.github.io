    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        -webkit-tap-highlight-color: transparent;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        background-color: var(--tg-theme-bg-color);
        color: var(--tg-theme-text-color);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 10px;
        overflow-x: hidden;
        touch-action: manipulation;
    }

    .header {
        width: 100%;
        text-align: center;
        margin-bottom: 15px;
    }

    .title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 8px;
    }

    .controls {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .btn {
        background-color: var(--tg-theme-button-color);
        color: var(--tg-theme-button-text-color);
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .btn:active {
        transform: scale(0.95);
    }

    .counter {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
        margin-bottom: 15px;
        background-color: rgba(0, 0, 0, 0.05);
        padding: 5px 12px;
        border-radius: 20px;
    }

    .counter-value {
        background-color: var(--tg-theme-button-color);
        color: var(--tg-theme-button-text-color);
        border-radius: 15px;
        padding: 3px 10px;
        font-weight: bold;
    }

    .popit {
        background-color: var(--popit-bg);
        border-radius: 16px;
        padding: 12px;
        width: 100%;
        max-width: 350px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
    }

    .bubble {
        background-color: var(--bubble-bg);
        border-radius: 50%;
        aspect-ratio: 1/1;
        width: 100%;
        cursor: pointer;
        transition: all 0.15s ease;
        box-shadow: inset 0 -3px 0 rgba(0, 0, 0, 0.1);
    }

    .bubble.popped {
        background-color: var(--bubble-popped);
        transform: scale(0.9);
        box-shadow: inset 0 2px 3px rgba(0, 0, 0, 0.15);
    }

    .footer {
        margin-top: 15px;
        font-size: 12px;
        text-align: center;
        opacity: 0.7;
    }
</style>
<div class="controls">
    <button id="reset-btn" class="btn">Reset All</button>
    <button id="color-btn" class="btn">Change Color</button>
</div>

<div class="counter">
    <span>Pops:</span>
    <span id="pop-count" class="counter-value">0</span>
</div>

<div id="popit" class="popit">
    <div class="grid">
        <!-- Bubbles will be generated here -->
    </div>
</div>

<div class="footer">
    Tap the bubbles to pop them!
</div>

<script>
    // Initialize Telegram WebApp
    const tgApp = window.Telegram?.WebApp;
    if (tgApp) {
        tgApp.ready();
        tgApp.expand();
        
        // Apply Telegram theme colors if available
        if (tgApp.themeParams) {
            document.documentElement.style.setProperty('--tg-theme-bg-color', tgApp.themeParams.bg_color);
            document.documentElement.style.setProperty('--tg-theme-text-color', tgApp.themeParams.text_color);
            document.documentElement.style.setProperty('--tg-theme-button-color', tgApp.themeParams.button_color);
            document.documentElement.style.setProperty('--tg-theme-button-text-color', tgApp.themeParams.button_text_color);
        }
    }

    const popitContainer = document.querySelector('.grid');
    const resetBtn = document.getElementById('reset-btn');
    const colorBtn = document.getElementById('color-btn');
    const popCount = document.getElementById('pop-count');
    const popitElement = document.getElementById('popit');
    
    let totalPops = 0;
    let currentColorSet = 0;
    
    // Color schemes optimized for visibility
    const colorSets = [
        { popit: '#ff85a2', bubble: '#ff9fb6', popped: '#ffc1d0' },
        { popit: '#5b9bd5', bubble: '#7aaddf', popped: '#a8c7ea' },
        { popit: '#9b59b6', bubble: '#b07cc6', popped: '#c39bd3' },
        { popit: '#2ecc71', bubble: '#54d98c', popped: '#82e3ad' },
        { popit: '#f1c40f', bubble: '#f4d03f', popped: '#f7dc6f' }
    ];
    
    // Create bubbles - 6 rows of 5 bubbles
    function createBubbles() {
        popitContainer.innerHTML = '';
        
        for (let i = 0; i < 30; i++) {
            const bubble = document.createElement('div');
            bubble.className = 'bubble';
            
            bubble.addEventListener('click', () => {
                if (!bubble.classList.contains('popped')) {
                    bubble.classList.add('popped');
                    
                    // Haptic feedback if available
                    if (tgApp && tgApp.HapticFeedback) {
                        tgApp.HapticFeedback.impactOccurred('light');
                    }
                    
                    // Update counter
                    totalPops++;
                    popCount.textContent = totalPops;
                }
            });
            
            popitContainer.appendChild(bubble);
        }
        
        applyCurrentColorSet();
    }
    
    function resetBubbles() {
        const bubbles = document.querySelectorAll('.bubble');
        bubbles.forEach(bubble => {
            bubble.classList.remove('popped');
        });
        
        // Haptic feedback if available
        if (tgApp && tgApp.HapticFeedback) {
            tgApp.HapticFeedback.notificationOccurred('success');
        }
    }
    
    function changeColors() {
        currentColorSet = (currentColorSet + 1) % colorSets.length;
        applyCurrentColorSet();
        
        // Haptic feedback if available
        if (tgApp && tgApp.HapticFeedback) {
            tgApp.HapticFeedback.notificationOccurred('warning');
        }
    }
    
    function applyCurrentColorSet() {
        const colors = colorSets[currentColorSet];
        
        document.documentElement.style.setProperty('--popit-bg', colors.popit);
        document.documentElement.style.setProperty('--bubble-bg', colors.bubble);
        document.documentElement.style.setProperty('--bubble-popped', colors.popped);
    }
    
    // Initialize
    createBubbles();
    
    // Event listeners
    resetBtn.addEventListener('click', resetBubbles);
    colorBtn.addEventListener('click', changeColors);
    
    // Send data back to Telegram when user achieves something
    function sendDataToTelegram() {
        if (tgApp && totalPops >= 30) {
            // All bubbles popped achievement
            tgApp.sendData(JSON.stringify({
                action: "achievement",
                name: "all_popped",
                pops: totalPops
            }));
        }
    }
    
    // Optional: Close button handler
    if (tgApp) {
        tgApp.onEvent('backButtonClicked', () => {
            tgApp.close();
        });
    }
</script>
